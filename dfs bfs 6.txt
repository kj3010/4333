#include <iostream>
#include <stack>
#include <queue>
#include <string>
using namespace std;
class graph
{
public:
int mat[5][5];
void create();
void display();
int adjacent(int);
string check(int);
void DFS(int v1);
void BFS(int v1);
int visited[5];
int visited2[5];
graph()
{
for (int i = 0; i < 5; i++)
{
visited[i] = 0;
visited2[i]=0;
}
}
};
string graph ::check(int i)
{
int op;
op = i;
switch (op)
{
case 0:
return "COMP ";
break;
case 1:
return "IT ";
break;
case 2:
return "ETC ";
break;
case 3:
return "ELE ";
break;
case 4:
return "CIVIL ";
break;
}
}
void graph ::create()
{
int d;
int i, j;
for (i = 0; i < 5; i++)
{
for (j = i; j < 5; j++)
{
if (i == j)
{
mat[i][j] = 0;
continue;
}
string m, n;
m = check(i);
n = check(j);
cout << "\nenter the distance from " << m << " to " << n << " : ";
cin >> d;
mat[i][j] = d;
mat[j][i] = mat[i][j];
}
}
}
void graph ::DFS(int v1)
{
stack<int> s1;
int v2;
cout<<"\nDFS : ";
cout << check(v1);
s1.push(v1);
visited[v1] = 1;
while (!s1.empty())
{
for (v2 = 0; v2 <= 4; v2++)
{
v1 = s1.top();
if (mat[v1][v2] != 0 && visited[v2] == 0 && v1 != v2)
{
cout << "-> ";
s1.push(v2);
cout << check(v2);
visited[v2] = 1;
}
}
s1.pop();
}
}
void graph::BFS(int v1)
{
queue<int> que;
que.push(v1);
visited2[v1] = 1;
cout<<"\nBFS : ";
while (!que.empty())
{
v1=que.front();
cout<<check(v1)<<" -> ";
que.pop();
for (int v2 = 0; v2 < 5; v2++)
{
if (mat[v1][v2] != 0 && visited2[v2] == 0 && v1 != v2)
{
que.push(v2);
visited2[v2] = 1;
}
}
}
}
void graph ::display()
{
cout << "\tCOMP\t"
<< "IT\t"
<< "ETC\t"
<< "ELE\t"
<< "CIVIL\t" << endl;
for (int i = 0; i < 5; i++)
{
cout << check(i);
for (int j = 0; j < 5; j++)
{
cout << "\t" << mat[i][j];
}
cout << endl;
}
}
int main()
{
graph g1;
int v1;
g1.create();
g1.display();
cout << "enter the starting depatment node "
<< "\n0 for COMP "
<< "\n1 for IT "
<< "\n2 for ETC "
<< "\n3 for ELE "
<< "\n4 for CIVIL "
<< "\n enter option here : ";
cin >> v1;
g1.DFS(v1);
g1.BFS(v1);
return 0;
}